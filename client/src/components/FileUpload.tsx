import { useContext, useState } from "react";
import axios from "axios";
import { AuthContext } from "@/contexts/AuthProvider";
import { useNavigate } from "react-router-dom";

interface FileData {
    userId: string;
    originalName: string;
    s3Key: string;
    contentType: string;
    fileSize: number;
}



interface PresignedUrlResponse {
    url: string;
    UploadedFile: FileData
}


const FileUpload: React.FC = () => {
    const [textExtractionCompleted, setTextExtractionCompleted] = useState(false);
    const auth = useContext(AuthContext);
    if (!auth) {
        throw new Error("Authprovider must be valid");
    }
    const { currUser } = auth;
    const navigate = useNavigate();

    const [file, setFile] = useState<File | null>(null);
    const [chapter, setChapter] = useState<string>("");
    const [extractedText, setExtractedText] = useState<string>("");
    const [isLoading,setIsLoading]=useState(false);
    // const [questions, setQuestions] = useState<Question[]>([]);

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files) {
            setFile(e.target.files[0]);
        }
    };

    const handleChapterChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setChapter(e.target.value);
    }

    const handleUploadClick = async () => {
        if (!file) {
            alert("Please select a file to upload");
            return;
        }
        try {
            setIsLoading(true);
            const filename = file.name;
            const contentType = file.type;
            const fileSizeInKb = file.size / 1024;
            const fileSizeInMb = fileSizeInKb / 1024;
            const userId = currUser?.id; // here user id will be the id that is getting generated by cuid();


            const response = await axios.post<PresignedUrlResponse>('http://localhost:7008/pdf/getPresignedUrl', { filename: filename, contentType: contentType, fileSize: fileSizeInMb, userId: userId });
            const { url, UploadedFile } = response.data;
            await uploadFileToS3(file, url);
            await extractTextFromFile(UploadedFile);
        } catch (error) {
            console.error("Error Fetching Presigned Url", error);
        }
    };

    const uploadFileToS3 = async (file: File, url: string) => {
        const formData = new FormData();
        formData.append("file", file);
        try {
            await axios.put(url, formData, {
                headers: {
                    "Content-Type": file.type,
                }
            });
            // alert("file Uploaded Successfully");
        } catch (error) {
            console.log("Error uploading file to s3", error);
            alert("Error uploading file");
        }
    }

    const extractTextFromFile = async (UploadedFile: FileData) => {
        const { s3Key } = UploadedFile;
        try {
            const signedUrlResponse = await axios.post('http://localhost:7008/pdf/getSignedUrlForGetObj', { s3Key });
            const signedUrl = signedUrlResponse.data.url;
            const extractionResponse = await axios.post('http://localhost:5000/extract-text', {
                pdf_url: signedUrl,
                section_type: "Chapter",
                section_number: chapter  //it should be Ten not 10
            });
            const text = extractionResponse.data.section_text;
            setExtractedText(text);
            setIsLoading(false);
            setTextExtractionCompleted(true);
        } catch (error) {
            console.error("error extracting text:", error);
            throw new Error("Failed to extract text from PDF");
        }
    }

    // const sendingTextToGeminiToGeneratePdf = async(text:string)=>{
    //     try {
    //         const response = await axios.post('http://localhost:7008/pdf/gemini',{text});
    //         console.log(response.data.result.response.candidates[0].content.parts[0].text);
    //     } catch (error) {
    //         console.error("error from the gemini model");
    //     }
    // }

    const sendingTextToGeminiToGenerateTest = async (text: string, userId: string) => {
        try {
            const response = await axios.post('http://localhost:7008/tests/generate', { text, userId });
            const testId = response.data.testId;
            setIsLoading(false);
            navigate(`/tests/${testId}`,{replace:true});
            // findingTest(testid);
        } catch (error) {
            console.error("Error generating test");
        }
    }

    // const findingTest = async (testId: string) => {
    //     try {
    //         const response = await axios.get(`http://localhost:7008/tests/${testId}`);
    //         console.log("questions:", response.data);
    //         setQuestions(response.data.testquestions);
    //     } catch (error) {
    //         console.error("error finding test");
    //     }
    // }

    const handleGenerateTest = async () => {
        if (extractedText && chapter) {
            const userId: string = currUser?.id!;
            setIsLoading(true);
            await sendingTextToGeminiToGenerateTest(extractedText, userId);
        }
    }


    if (isLoading) {
        return (
            <div className="flex mt-[300px] justify-center w-full ">
                <div className="animate-spin h-16 w-16 border-4 border-blue-500 border-t-transparent rounded-full"></div>
            </div>
        );
    }

    return (
        <div className="flex  justify-center w-full">
            <div className=" mt-[250px]">
                <h1 className="text-3xl font-bold text-center text-gray-800 mb-8">
                    PDF Test Generator
                </h1>
                <div className="space-y-6">
                    {/* Upload PDF Section */}
                    <div>
                        <label className="block text-lg font-semibold text-gray-700 mb-3">
                            Upload Your PDF
                        </label>
                        <input
                            type="file"
                            accept=".pdf"
                            onChange={handleFileChange}
                            className="block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500"
                        />
                    </div>

                    {/* Chapter Number Input */}
                    <div>
                        <label className="block text-lg font-semibold text-gray-700 mb-3">
                            Chapter Number
                        </label>
                        <input
                            type="text"
                            value={chapter}
                            onChange={handleChapterChange}
                            placeholder="Enter chapter number (e.g., Ten, Nine)"
                            className="block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500"
                        />
                    </div>

                    {/* Upload and Extract Button */}
                    <button
                        onClick={handleUploadClick}
                        className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-medium text-lg shadow hover:bg-blue-700 focus:ring focus:ring-blue-300 focus:ring-opacity-50 disabled:bg-gray-400"
                    >
                        Upload and Extract
                    </button>

                    {/* Conditionally show Generate Test and Download PDF Buttons */}
                    {textExtractionCompleted && (
                        <div className="flex gap-6 justify-center mt-6">
                            <button
                                onClick={handleGenerateTest}
                                className="bg-green-600 text-white py-3 px-6 rounded-lg font-medium text-lg shadow hover:bg-green-700 focus:ring focus:ring-green-300 focus:ring-opacity-50"
                                disabled={!textExtractionCompleted}
                            >
                                Generate Test
                            </button>
                            <a
                                href="link-to-download.pdf"
                                className="bg-gray-600 text-white py-3 px-6 rounded-lg font-medium text-lg shadow hover:bg-gray-700 focus:ring focus:ring-gray-300 focus:ring-opacity-50"
                                download
                            >
                                Download PDF
                            </a>
                        </div>
                    )}

                    {/* Conditionally Render Generated Questions */}
                    {/* {questions.length > 0 && (
                        <div className="mt-8">
                            <h2 className="text-2xl font-bold text-gray-800 mb-4">
                                Generated Questions
                            </h2>
                            <div className="space-y-6">
                                {questions.map((q, index) => (
                                    <div
                                        key={index}
                                        className="p-6 bg-gray-50 border border-gray-300 rounded-lg shadow"
                                    >
                                        <p className="text-lg font-semibold text-gray-800 mb-2">
                                            {q.questionText}
                                        </p>
                                        <ul className="list-disc pl-6 space-y-1">
                                            {q.options.map((option, idx) => (
                                                <li key={idx} className="text-gray-700">
                                                    {option}
                                                </li>
                                            ))}
                                        </ul>
                                        <p className="text-sm text-gray-600 mt-3">
                                            <strong>Correct Answer:</strong> {q.correctAnswer}
                                        </p>
                                        <p className="text-sm text-gray-600">
                                            <strong>Explanation:</strong> {q.explanation}
                                        </p>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )} */}
                </div>
            </div>
        </div>

    )
}

export default FileUpload