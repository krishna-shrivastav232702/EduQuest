import { useContext, useState } from "react";
import axios from "axios";
import { AuthContext } from "@/contexts/AuthProvider";

interface FileData {
    userId: string;
    originalName: string;
    s3Key: string;
    contentType: string;
    fileSize: number;
}

interface Question {
    questionText: string;
    options: string[];
    correctAnswer: string;
    explanation: string;
}


interface PresignedUrlResponse {
    url: string;
    UploadedFile: FileData
}


const FileUpload: React.FC = () => {
    const [textExtractionCompleted,setTextExtractionCompleted]=useState(false);
    const auth = useContext(AuthContext);
    if (!auth) {
        throw new Error("Authprovider must be valid");
    }
    const { currUser } = auth;

    const [file, setFile] = useState<File | null>(null);
    const [chapter, setChapter] = useState<string>("");
    const [extractedText, setExtractedText] = useState<string>("");
    const [testId, setTestId] = useState<string | null>(null);
    const [questions, setQuestions] = useState<Question[]>([]);

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files) {
            setFile(e.target.files[0]);
        }
    };

    const handleChapterChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setChapter(e.target.value);
    }

    const handleUploadClick = async () => {
        if (!file) {
            alert("Please select a file to upload");
            return;
        }
        try {
            console.log("entered");
            console.log(currUser?.id);
            const filename = file.name;
            const contentType = file.type;
            const fileSizeInKb = file.size / 1024;
            const fileSizeInMb = fileSizeInKb / 1024;
            const userId = currUser?.id; // here user id will be the id that is getting generated by cuid();


            const response = await axios.post<PresignedUrlResponse>('http://localhost:7008/pdf/getPresignedUrl', { filename: filename, contentType: contentType, fileSize: fileSizeInMb, userId: userId });
            const { url, UploadedFile } = response.data;
            await uploadFileToS3(file, url);
            await extractTextFromFile(UploadedFile);
        } catch (error) {
            console.error("Error Fetching Presigned Url", error);
        }
    };

    const uploadFileToS3 = async (file: File, url: string) => {
        const formData = new FormData();
        formData.append("file", file);
        try {
            await axios.put(url, formData, {
                headers: {
                    "Content-Type": file.type,
                }
            });
            alert("file Uploaded Successfully");
        } catch (error) {
            console.log("Error uploading file to s3", error);
            alert("Error uploading file");
        }
    }

    const extractTextFromFile = async (UploadedFile: FileData) => {
        const { s3Key } = UploadedFile;
        try {
            const signedUrlResponse = await axios.post('http://localhost:7008/pdf/getSignedUrlForGetObj', { s3Key });
            const signedUrl = signedUrlResponse.data.url;
            const extractionResponse = await axios.post('http://localhost:5000/extract-text', {
                pdf_url: signedUrl,
                section_type: "Chapter",
                section_number: chapter  //it should be Ten not 10
            });
            const text = extractionResponse.data.section_text;
            setExtractedText(text);
            setTextExtractionCompleted(true);
        } catch (error) {
            console.error("error extracting text:", error);
            throw new Error("Failed to extract text from PDF");
        }
    }

    // const sendingTextToGeminiToGeneratePdf = async(text:string)=>{
    //     try {
    //         const response = await axios.post('http://localhost:7008/pdf/gemini',{text});
    //         console.log(response.data.result.response.candidates[0].content.parts[0].text);
    //     } catch (error) {
    //         console.error("error from the gemini model");
    //     }
    // }

    const sendingTextToGeminiToGenerateTest = async (text: string, userId: string) => {
        try {
            const response = await axios.post('http://localhost:7008/tests/generate', { text, userId });
            console.log(response.data);
            setTestId(response.data.testId); //this will give testId
        } catch (error) {
            console.error("Error generating test");
        }
    }

    const findingTest = async (testId: string) => {
        try {
            const response = await axios.get(`http://localhost:7008/tests/${testId}`);
            console.log("questions:", response.data);
            setQuestions(response.data.testquestions);
        } catch (error) {
            console.error("error finding test");
        }
    }

    const handleGenerateTest = async () => {
        if (extractedText && chapter) {
            const userId:string = currUser?.id!;
            await sendingTextToGeminiToGenerateTest(extractedText, userId);
        }
    }

    const handleFetchTest = async () => {
        if (testId) {
            await findingTest(testId);
        }
    };

    return (
         <div className="p-4 max-w-2xl mx-auto">
        <div className="space-y-4">
            <div>
                <label className="block text-sm font-medium mb-2">
                    Upload PDF
                </label>
                <input
                    type="file"
                    accept=".pdf"
                    onChange={handleFileChange}
                    className="w-full border rounded p-2"
                />
            </div>

            <div>
                <label className="block text-sm font-medium mb-2">
                    Chapter Number
                </label>
                <input
                    type="text"
                    value={chapter}
                    onChange={handleChapterChange}
                    placeholder="Enter chapter number (e.g: Ten,Nine)"
                    className="w-full border rounded p-2"
                />
            </div>

            <button
                onClick={handleGenerateTest}
                className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 mt-4"
                disabled={!textExtractionCompleted}
            >
                Generate Test
            </button>
            <button
                onClick={handleFetchTest}
                className="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600 mt-4"
                disabled={!testId}
            >
                Fetch Test
            </button>

            <button
                onClick={handleUploadClick}
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400"
            >
                Upload and Extract
            </button>

            {/* Conditionally show download PDF button */}
            {textExtractionCompleted && (
                <a
                    href="link-to-download.pdf"
                    className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 mt-4"
                    download
                >
                    Download PDF
                </a>
            )}

            {/* Conditionally render generated questions */}
            {questions.length > 0 && (
                <div className="mt-4">
                    <h3 className="font-medium mb-2">Generated Questions:</h3>
                    <div className="border p-4 rounded bg-gray-50">
                        {questions.map((q, index) => (
                            <div key={index} className="mb-4">
                                <p className="font-semibold">{q.questionText}</p>
                                <ul>
                                    {q.options.map((option, idx) => (
                                        <li key={idx}>{option}</li>
                                    ))}
                                </ul>
                                <p className="text-sm text-gray-500">Correct Answer: {q.correctAnswer}</p>
                                <p className="text-sm text-gray-500">Explanation: {q.explanation}</p>
                            </div>
                        ))}
                    </div>
                </div>
            )}
        </div>
    </div>
    )
}

export default FileUpload